<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/util
         http://www.springframework.org/schema/util/spring-util-3.0.xsd">


    <!-- 打开Spring的Annotation支持 -->
    <context:annotation-config />
    <!-- 设定Spring 去哪些包中找Annotation -->
    <context:component-scan base-package="home" />
    <!-- 强制SPRING使用CGLIB动态代理，不使用JDK代理。如果不强制，则上下文注入 都得用接口的形式注入，Hibernate 的配置也得加 这个 -->
    <aop:config proxy-target-class="true" />

    <!-- 导入resources目录下的jdbc.properties文件 -->
    <context:property-placeholder location="classpath*:spring/properties/jdbc.properties" ignore-unresolvable="true"/>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!--
         配置连接池的初始值
        <property name="initialSize" value="1" />
        连接池的最大值
         <property name="maxActive" value="500"/>
         最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止
         <property name="maxIdle" value="2"/>
        当最小空闲时，当连接少于minIdle时会自动去申请一些连接
        <property name="minIdle" value="1" />
        <property name="maxActive" value="100" />
        <property name="maxIdle" value="20" />
        <property name="maxWait" value="1000" />
         -->
    </bean>
    <!--创建Spring的SessionFactory工厂 -->
    <!-- 如果使用的是Annotation的方式，不能使用LocalSessionFactoryBean,而应该使用 org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 设置Spring取那个包中查找相应的实体类 -->
        <property name="packagesToScan">
            <value>home.entity</value>
        </property>
        <property name="hibernateProperties">
            <!-- <value> hibernate.dialect=org.hibernate.dialect.HSQLDialect </value> -->
            <props>
                <!-- 指定Hibernate的连接方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <!-- 配置启动应用时，是否根据Hibernate映射自动创建数据表 -->
                <!-- 其它几个参数的意思: -->
                <!-- validate			加载hibernate时，验证创建数据库表结构 -->
                <!-- create				每次加载hibernate，重新创建数据库表结构 -->
                <!-- create-drop		加载hibernate时创建，退出是删除表结构 -->
                <!-- update				加载hibernate自动更新数据库结构 -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
    </bean>

    <!-- A transaction manager for working with Hibernate SessionFactories -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
        <!-- 主事务决定是否回滚 -->
        <property name="globalRollbackOnParticipationFailure" value="false" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>
